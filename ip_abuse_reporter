#!/bin/bash
email_ip_sorted_file=$(mktemp)
ip_log="$1"

while getopts "df:" opt; do
  case "$opt" in
    d)
      dry_run=yes
      ;;
    f)
      ip_log="$OPTARG"
      ;;
  esac
done


if [ ! -f "$ip_log" ]
  then
    echo "$ip_log" 'does not exist! Exiting'
    exit 1
fi
ip_log_converted=$(mktemp)
sort -u $ip_log > "$ip_log_converted"


# generate into list of ipaddresses and their abuse email from ip address list with whois
while read ip_address
  do
      # Extract IP address
    extracted_ip_address=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<<"$ip_address")
      # Check for email in list
    echo $ip_address | egrep -q -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b|null"
    if [ $? == 0 ]
      then
        whois_abuse_email=$(echo $ip_address | grep -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b")
      else
        whois_abuse_email=$(whois "$(echo $extracted_ip_address | cut -d' ' -f1)" | grep abuse | grep -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b" | head -n1)
        if [ -n "$whois_abuse_email" ]
          then
            sed -i "s:$extracted_ip_address:$extracted_ip_address $whois_abuse_email:g" "$ip_log"
          else
            sed -i "s:$extracted_ip_address:$extracted_ip_address null:g" "$ip_log"
        fi
    fi
    if [ -n "$whois_abuse_email" ]
      then
        echo "$(cut -d' ' -f1 <<<"$extracted_ip_address")" "$whois_abuse_email" | tee --append "$email_ip_sorted_file"
      else
        echo No abuse email available for $(cut -d' ' -f1 <<<"$extracted_ip_address")
    fi
    unset whois_abuse_email
done < "$ip_log_converted"
echo ""

# Grab abuse emails from list
cut -f2 -d' ' "$email_ip_sorted_file" | sort | uniq > "$email_ip_sorted_file"_email_list

if [ "${dry_run:-no}" != yes ]
  then
    echo Select abuse message
    printf '1) SSH Logins \n'
    printf '  Subject: SSH Login Abuse Notification - {IP_ADDRESS_COUNT} Addresses \n'
    printf '  These ip addresses are being used to fraudulently attempt to login to my SSH server. Please review network activity \n'
    printf '2) Spam Messages \n'
    printf '  Subject: Spam Message Abuse Notification - {IP_ADDRESS_COUNT} Addresses \n'
    printf '  These ip addresses are being used to post spam messages to comment boards / forums on my server. Please review network activity \n'
    printf '3) Website Login \n'
    printf '  Subject: Website Login Abuse Notification - {IP_ADDRESS_COUNT} Addresses \n'
    printf '  These ip addresses are being used to attempt to fraudulently login to my blog. Please review network activity \n'
    read -p '[123] ' abuse_selection
fi

while read abuse_email
  do
    email_sorted_ip_addresses="$(grep "$abuse_email" $email_ip_sorted_file | cut -f1 -d' ' | tr '\n' ' ')"
    if [ "${dry_run:-no}" == yes ]
      then
        echo Will email "$abuse_email" - "$email_sorted_ip_addresses"
      else
        echo Reported "$abuse_email" - "$email_sorted_ip_addresses"


        if [ "$abuse_selection" == 1 ]
          then
            message_subject="SSH Login Abuse Notification - "$(wc -w <<<"$email_sorted_ip_addresses")" Addresses"
            message=$(echo "These ip addresses are being used to fraudulently attempt to login to my SSH server. Please review network activity \n$(echo $email_sorted_ip_addresses | tr ' \t' '\n') \n")
        elif [ "$abuse_selection" == 2 ]
          then
            message_subject="Spam Message Abuse Notification - "$(wc -w <<<"$email_sorted_ip_addresses")" Addresses"
            message=$(echo "These ip addresses are being used to post spam messages to comment boards / forums on my server. Please review network activity \n$(echo $email_sorted_ip_addresses | tr ' \t' '\n') \n")
        elif [ "$abuse_selection" == 3 ]
          then
            message_subject="Website Login Abuse Notification - "$(wc -w <<<"$email_sorted_ip_addresses")" Addresses"
            message=$(echo "These ip addresses are being used to attempt to fraudulently login to my blog. Please review network activity \n$(echo $email_sorted_ip_addresses | tr ' \t' '\n') \n")
        elif [ -z "$abuse_selection" ]
          then
            echo 'No Message set - Exiting'
            exit 1
        fi

        echo -e "$message" | mail -s "$message_subject" "$abuse_email"
        sleep 1
    fi
done < "$email_ip_sorted_file"_email_list

rm "$ip_log_converted" "$email_ip_sorted_file" "$email_ip_sorted_file"_email_list
